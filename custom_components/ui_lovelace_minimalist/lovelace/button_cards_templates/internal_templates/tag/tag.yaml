### Icon ###
tag:
  color: var(--google-grey)
  show_icon: false
  show_label: true
  show_name: true
  show_last_changed: false
  # show_last_changed: >
  #   [[[
  #     return "false";
  #   ]]]
  variables:
    ulm_swapped: false
    ulm_show_last_changed: false
    ulm_name_divider: "•"
    ulm_name_1:
    ulm_name_2:
    ulm_name_3:
    ulm_name_4:
    ulm_label_divider: "•"
    ulm_label_1:
    ulm_label_2:
    ulm_label_3:
    ulm_label_4:
  name: >
    [[[
      if (variables.ulm_swapped == false){
        var name = "";
        if (variables.ulm_name_1 != null){
          name = name + variables.ulm_name_1;
        }
        if(variables.ulm_name_2 != null){
          name = name + " " + variables.ulm_name_divider + " " + variables.ulm_name_2;
        }
        if(variables.ulm_name_3 != null){
          name = name + " " + variables.ulm_name_divider + " " + variables.ulm_name_3;
        }
        if(variables.ulm_name_4 != null){
          name = name + " " + variables.ulm_name_divider + " " + variables.ulm_name_4;
        }
        if(name != "null" && name != "" && name != " "){
          return name;
        } else{
          return entity.attributes.friendly_name;
        }
      }
      if (variables.ulm_swapped == true && variables.ulm_show_last_changed == false){
        var label = "";
        if (variables.ulm_label_1 != null){
          label = label + variables.ulm_label_1;
        }
        if(variables.ulm_label_2 != null){
          label = label + " " + variables.ulm_label_divider + " " + variables.ulm_label_2;
        }
        if(variables.ulm_label_3 != null){
          label = label + " " + variables.ulm_label_divider + " " + variables.ulm_label_3;
        }
        if(variables.ulm_label_4 != null){
          label = label + " " + variables.ulm_label_divider + " " + variables.ulm_label_4;
        }
        if(name != "null" && name != "" && name != " "){
          return label;
        }
      }
      if (variables.ulm_show_last_changed == true){
        function timeDifference(current, previous) {
          var msPerMinute = 60 * 1000;
          var msPerHour = msPerMinute * 60;
          var msPerDay = msPerHour * 24;
          var msPerMonth = msPerDay * 30;
          var msPerYear = msPerDay * 365;

          var elapsed = current - previous;

          if (elapsed < msPerMinute) {
            return Math.round(elapsed/1000) + ' seconds ago';   
          } else if (elapsed < msPerHour) {
            return Math.round(elapsed/msPerMinute) + ' minutes ago';   
          } else if (elapsed < msPerDay ) {
            return Math.round(elapsed/msPerHour ) + ' hours ago';   
          } else if (elapsed < msPerMonth) {
            return Math.round(elapsed/msPerDay) + ' days ago';   
          } else if (elapsed < msPerYear) {
            return Math.round(elapsed/msPerMonth) + ' months ago';   
          } else {
            return Math.round(elapsed/msPerYear ) + ' years ago';   
          }
        }
        return timeDifference(new Date(), new Date(entity.last_changed));
      }
    ]]]
  label: >
    [[[
      if (variables.ulm_swapped == false && variables.ulm_show_last_changed == false){
        var label = "";
        if (variables.ulm_label_1 != null){
          label = label + variables.ulm_label_1;
        }
        if(variables.ulm_label_2 != null){
          label = label + " " + variables.ulm_label_divider + " " + variables.ulm_label_2;
        }
        if(variables.ulm_label_3 != null){
          label = label + " " + variables.ulm_label_divider + " " + variables.ulm_label_3;
        }
        if(variables.ulm_label_4 != null){
          label = label + " " + variables.ulm_label_divider + " " + variables.ulm_label_4;
        }
        if(name != "null" && name != "" && name != " "){
          return label;
        }
      }
      if (variables.ulm_swapped == true){
        var name = "";
        if (variables.ulm_name_1 != null){
          name = name + variables.ulm_name_1;
        }
        if(variables.ulm_name_2 != null){
          name = name + " " + variables.ulm_name_divider + " " + variables.ulm_name_2;
        }
        if(variables.ulm_name_3 != null){
          name = name + " " + variables.ulm_name_divider + " " + variables.ulm_name_3;
        }
        if(variables.ulm_name_4 != null){
          name = name + " " + variables.ulm_name_divider + " " + variables.ulm_name_4;
        }
        if(name != "null" && name != "" && name != " "){
          return name;
        } else{
          return entity.attributes.friendly_name;
        }
      }
      if (variables.ulm_show_last_changed == true){
        function timeDifference(current, previous) {
          var msPerMinute = 60 * 1000;
          var msPerHour = msPerMinute * 60;
          var msPerDay = msPerHour * 24;
          var msPerMonth = msPerDay * 30;
          var msPerYear = msPerDay * 365;

          var elapsed = current - previous;

          if (elapsed < msPerMinute) {
            return Math.round(elapsed/1000) + ' seconds ago';   
          } else if (elapsed < msPerHour) {
            return Math.round(elapsed/msPerMinute) + ' minutes ago';   
          } else if (elapsed < msPerDay ) {
            return Math.round(elapsed/msPerHour ) + ' hours ago';   
          } else if (elapsed < msPerMonth) {
            return Math.round(elapsed/msPerDay) + ' days ago';   
          } else if (elapsed < msPerYear) {
            return Math.round(elapsed/msPerMonth) + ' months ago';   
          } else {
            return Math.round(elapsed/msPerYear ) + ' years ago';   
          }
        }
        return timeDifference(new Date(), new Date(entity.last_changed));
      }
    ]]]
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.2)"
    img_cell:
      - background-color: "rgba(var(--color-theme),0.05)"
      - border-radius: 50%
      - place-self: center
      - width: 42px
      - height: 42px
    grid:
      - grid-template-areas: '"n" "l"'
      - grid-template-columns: min-content auto
      - grid-template-rows: min-content min-content
    card:
      - background: none
      - box-shadow: none
      - padding: 0px
    label:
      - justify-self: start
      - align-self: start
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
    name:
      - align-self: end
      - justify-self: start
      - font-weight: bold
      - font-size: 14px
    state:
      - justify-self: start
      - align-self: start
      - font-weight: bold
      - font-size: 12px
      - filter: opacity(40%)
  custom_fields:
  size: 20px
